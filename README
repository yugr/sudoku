= Overview =

This is a simple Sudoku solver that I've started to experiment with SAT/SMT solvers.
It currently only runs for boards up to 36x36 (k = 6).

= Build =

Install Haskell Platform and do
  $ make clean all
  $ make test-obj

= Plans =

* plot timing graphs (time vs. #constraints, #constraints vs. #vars)
* see how rule order influences MiniSAT timing
* find all solutions (plot graph number-of-sols vs. percentage)
* experiment with different encodings:
** Sudoku as a SAT Problem (http://anytime.cs.umass.edu/aimath06/proceedings/P34.pdf)
** A SAT-based Sudoku Solver (https://www.lri.fr/~conchon/mpri/weber.pdf)
** Optimized CNF Encoding for Sudoku Puzzles (http://www.cs.cmu.edu/~hjain/papers/sudoku-as-SAT.pdf)
* see how Haskell people do interfaces to MiniSAT or other external solvers (and how they cope with big CNFs)
* experiment with SMT solvers

= TODO =

* handle FIXME
* store temp files in separate folder
* write Haddocks
* run for inputs up to 100x100 (k=10); ideas:
** understand where is all the memory going to
** use strict fields aggressively
** generate all rules for each cell in one function
** use streams

